program: src/main.py
method: bayes          # Use Bayesian optimization
metric:               # Metric to optimize
  name: val_accuracy      # Replace with your evaluation metric
  goal: maximize      # Can be "minimize" or "maximize"

parameters:
  # Experiment defaults
  dataset:
    value: mnist
  scenario:
    value: class_inc
  model:
    value: mlp
  method:
    value: lwf
  exp.seed: 
    value: 42      
  exp.batch_size:
    value: 32        
  exp.epochs: 
    value: 50
  exp.gen_cm: 
    value: True
  exp.detect_anomaly:
    value: False       

  # Model configuration
  model._target_: 
    value: model.MLP
  model.initial_out_features:
    value: 2          
  model.sizes:
    value: [1024, 400, 400]     
  model.head_type: 
    values: [Local, Normal]
  model.add_fc_local: 
    values: [True, False] 
  model.train_domain: 
    values: [True, False]            

  # Method configuration
  method._partial_: 
    value: True
  method._target_: 
    value: method.LwF
  method.criterion._target_: 
    value: torch.nn.CrossEntropyLoss
  method.first_lr: 
    distribution: log_uniform_values
    min: 0.0001
    max: 0.01
  method.lr: 
    distribution: log_uniform_values 
    min: 0.0001
    max: 0.01
  method.T: 
    distribution: uniform      
    min: 1
    max: 4
  method.alpha: 
    distribution: uniform      
    min: 0.6
    max: 0.95
  method.gamma: 
    distribution: uniform  
    min: 0.0
    max: 1.0
  method.clipgrad: 
    value: 0.000001


command:
  - ${env}
  - python
  - ${program}
  - --config-name
  - lwf_split_mnist_mlp.yaml
  - ${args_no_hyphens}